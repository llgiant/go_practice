package main

import "fmt"

/*func main() {
	s1 := make([]int, 0, 3)  // len = 0 cap = 3 s1 = [0,0,0]
	s1 = append(s1, 1, 2, 3) // len = 3 cap = 3 s1 = [1,2,3]

	s2 := s1[:2]         // len = 2 cap = 3 base on s1 s2 = [1,2],3,  s1 = [1,2,3]
	s3 := append(s2, 99) // len = 3 cap = 3 base on s1
	// s3 = [1,2,99]
	//s2 = [1,2],99
	//s1 = [1,2,99]

	s2[0] = 77
	// s3 = [77,2,99]
	//s2 = [77,2],99
	//s1 = [77,2,99]
	s3[1] = 88
	// s3 = [77,88,99]
	//s2 = [77,88],99
	//s1 = [77,88,99]

	s1 = append(s1, 100) // len = 4 cap = 6 new array s1 = [77,88,99,100]0,0,
	// s3 = [77,88,99]
	//s2 = [77,88],99

	s3 = append(s3, 200) //len = 4 cap = 6 new array s3 = [77,88,99,200],0,0
	fmt.Println("E:", "s1:", s1, "s2:", s2, "s3:", s3)
	//s1 = [77,88,99,100]
	// s2 = [77,88]
	// s3 = [77,88,99,200]

}


func main() {
	s := make([]int, 0, 2)
	s = append(s, 1, 2)

	fmt.Printf("main: len=%d cap=%d ptr=%p\n", len(s), cap(s), &s[0])
	grow(s)
	fmt.Printf("after grow: len=%d cap=%d ptr=%p\n", len(s), cap(s), &s[0])
	growPtr(&s)
	fmt.Printf("after growPtr: len=%d cap=%d ptr=%p\n", len(s), cap(s), &s[0])

}
func grow(s []int) {
	fmt.Printf("func: before append len=%d cap=%d ptr=%p\n", len(s), cap(s), &s[0])
	s = append(s, 3) // –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π backing array
	fmt.Printf("func: after  append len=%d cap=%d ptr=%p\n", len(s), cap(s), &s[0])
}

func growPtr(ps *[]int) {
	*ps = append(*ps, 3)
}


func main() {
	a := make([]int, 0, 4)    // len=0 cap=4 a=[_,_,_,_]
	a = append(a, 10, 20, 30) //len=3 cap=4 a=[10,20,30,_]
	fmt.Println("A:", a, "len:", len(a), "cap:", cap(a))

	b := a[:2]               // len=2 cap=4 b -> a backing array b=[10,20,_,_]
	c := make([]int, len(b)) //len=2 cap=2 new backing array c=[_,_]
	copy(c, b)               //len=2 cap=2 c=[10,20]
	fmt.Println("B:", "a:", a, "b:", b, "c:", c)
	fmt.Println("B:", b, "len:", len(b), "cap:", cap(b))

	b[0] = 100 // b->[100,20,_,_] a->[100,20,30,_]
	c[1] = 200 //c->[10,200]
	fmt.Println("C:", "a:", a, "b:", b, "c:", c)

	a = append(a, 40) //len=4 cap=4 a->[100,20,30,40]
	fmt.Println("D:", "a:", a, "b:", b, "c:", c)

	c = append(c, 300) // len=3 cap=4 new backing array for c->[10,200,300,_]
	fmt.Println("E:", "a:", a, "b:", b, "c:", c)
}

–ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—É—Ä–æ–≤–µ–Ω—å middle)
–ü–æ—á–µ–º—É copy(c, b) –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –æ–±—â—É—é –ø–∞–º—è—Ç—å, —Ö–æ—Ç—è –≤–Ω—É—Ç—Ä–∏ –≤—Å—ë –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ?
–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É a = make([]int, 0, 3)?
–ï—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å b = a[:3] –ø–µ—Ä–µ–¥ append(a, 40) ‚Äî –∏–∑–º–µ–Ω–∏—Ç—Å—è –ª–∏ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞?
–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã c —Ä–∞–∑–¥–µ–ª—è–ª –ø–∞–º—è—Ç—å —Å a, –Ω–æ –∏–º–µ–ª —Å–≤–æ—é –¥–ª–∏–Ω—É –∏ cap?

–ü–æ—á–µ–º—É –≤—ã–≥–æ–¥–Ω–æ –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å copy() –ø–æ—Å–ª–µ append() (–Ω–∞–º—ë–∫: —á—Ç–æ–±—ã –æ—Ç—Ä–µ–∑–∞—Ç—å —Å—Ç–∞—Ä—ã–π cap –∏ –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–æ–ª—å—à–æ–π backing array)?
1) –ü–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –µ—â–µ –ø–æ—Ç–æ–º—É —á—Ç–æ c –∏ b –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –ø–æ –¥–ª–∏–Ω–µ –∏ –±–µ—Ä–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–Ω–æ–≥–æ –∏–∑ 2-—Ö –º–∞—Å—Å–∏–≤–æ–≤ 2) –ü–æ—Ç–µ—Ä—è–µ—Ç—Å—è —Å–≤—è–∑—å –º–µ–∂–¥—É a –∏ b, —ë–º–∫–æ—Å—Ç—å –∞ —É–≤–µ–ª–∏—á–∏—Ç—Å—è –≤–¥–≤–æ–µ –¥–æ 6 –∏ —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ –Ω–æ–≤—ã–π –∏ —Å—ã–ª–∫–∞ –≤ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–µ —Å–ª–∞–π—Å–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ —Å—Å—ã–ª–∫–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ b —É–∂–µ –±–µ–¥–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Å–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –ø–æ—Ç–æ–º—É —á—Ç–æ GC —É–¥–∞–ª–∏–ª –µ–≥–æ –∏–∑ –ø–∞–º—è—Ç–∏ 3) –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª–æ —É—Å–ª–æ–≤–∏–µ a = make([]int, 0, 3) —Ç–æ –¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ —è –æ–ø–∏—Å–∞–ª –≤ –ø.2 4) –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ 5) —á—Ç–æ–±—ã –æ—Ç—Ä–µ–∑–∞—Ç—å —Å—Ç–∞—Ä—ã–π cap –∏ –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–æ–ª—å—à–æ–π backing array


–ó–∞–¥–∞—á–∞ ‚Ññ3 ‚Äî ‚Äú–¢—Ä—ë—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ –∏ –ø–æ–ª–Ω—ã–π —Å—Ä–µ–∑‚Äù
–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç:
–ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–æ–≥–¥–∞ append –¥–µ–ª–∏—Ç –∏ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç –ø–∞–º—è—Ç—å,
—Ä–∞–±–æ—Ç—É —Å full slice expression [:len:len] (–¥–ª—è ‚Äú–æ—Ç—Ä–µ–∑–∞–Ω–∏—è cap‚Äù),
–∏ —Ç–æ, –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å—Ä–µ–∑–∞ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è (–∏–ª–∏ –Ω–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è) –≤ –¥—Ä—É–≥–∏—Ö.


func main() {
	s1 := make([]int, 0, 5)  //s1->[_][_][_][_][_]
	s1 = append(s1, 1, 2, 3) // s1->[1][2][3][_][_]

	s2 := s1[:2]   // len=2 cap=5, –æ–±—â–∞—è –ø–∞–º—è—Ç—å c s1 s2->[1][2][_][_][_]
	s3 := s2[:1:1] // s3->[1] len=1 cap=1 ‚Äî –æ—Ç—Ä–µ–∑–∞–µ–º cap (–Ω–æ–≤—ã–π —Å–ª–∞–π—Å, –Ω–æ —Ç–æ—Ç –∂–µ backing array, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π)

	s3 = append(s3, 100) // –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Ç.–∫. cap(s3)=1
	//s3->[1][100] new backing array len=2 cap=2

	s2 = append(s2, 200) // cap(s2)=5, —Ö–≤–∞—Ç–∞–µ—Ç –º–µ—Å—Ç–∞ ‚Äî –∏–∑–º–µ–Ω–∏—Ç s1
	//s2->[1][2][200][_][_]
	//s1->[1][2][200][_][_]

	s1 = append(s1, 300, 400, 500) //–±—É–¥–µ—Ç len=6 cap=10
	//—Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π backing array –∏ –æ—Ç–≤—è–∂–µ—Ç—Å—è –æ—Ç s2
	//s1->[1][2][200][300][400][500]
	fmt.Println("s1:", s1, "s2:", s2, "s3:", s3)
//s1->[1][2][200][300][400][500]
//s2->[1][2][200][_][_]
//s3->[1][100]
}
–í–æ–ø—Ä–æ—Å—ã –æ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
–ü–æ—á–µ–º—É s3 –Ω–µ –∏–∑–º–µ–Ω–∏–ª s1, —Ö–æ—Ç—è –±—ã–ª —Å—Ä–µ–∑–∞–Ω –∏–∑ –Ω–µ–≥–æ?
–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ [:1:1]?
–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã ‚Äú–æ—Ç—Ä–µ–∑–∞—Ç—å‚Äù cap –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–µ–∑–∞, –Ω–æ —Å –ø–æ–º–æ—â—å—é copy()?
–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ s2 := s1[:2] –¥–æ–±–∞–≤–∏—Ç—å s1 = append(s1, 999)?
–ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É [:1:1], –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏ s3 –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º?


func main() {
	base := []int{1, 2, 3, 4} // len=4 cap=4 base ->[1 2 3 4]
	group := [][]int{
		base[:2],
		base[2:],
	}
	//group len=2 cap=2
	//len[0]=2 cap[0]=4 group[0]->[1 2]
	//len[1]=2 cap[1]=4 group[1]->[3 4]

	group[0][1] = 100
	//len[0]=2 cap[0]=4 group[0]->[1 100]
	//base ->[1 100 3 4]
	group[1][0] = 200
	//len[1]=2 cap[1]=4 group[1]->[200 4]
	//base ->[1 100 200 4]
	newBase := append(base, 999)
	//—Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è newBase —Ç–∞–∫ –∫–∞–∫ –≤ –µ–º–∫–æ—Å—Ç–∏ Base –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç append –Ω–µ–∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç base
	//newBase->[1 100 200 4 999] len=5 cap=8
	fmt.Println("Base:", base)
	fmt.Println("newBase:", newBase)

	group = append(group, newBase[:2]) //
	//group len=3 cap=4
	//len[0]=2 cap[0]=4 group[0]->[1 2]
	//len[1]=2 cap[1]=4 group[1]->[3 4]
	//len[2]=2 cap[1]=2 group[1]->[1 2] new backing array

	group[2][1] = 500
	//len[0]=2 cap[0]=4 group[0]->[1 2]
	//len[1]=2 cap[1]=4 group[1]->[3 4]
	//len[2]=2 cap[1]=2 group[1]->[1 500] new backing array
	//newBase->[1 500 200 4 999] len=5 cap=8

	fmt.Println("base:", base)       //base ->[1 100 200 4]
	fmt.Println("newBase:", newBase) //newBase->[1 500 200 4 999]
	fmt.Println("group:", group)
	//len[0]=2 cap[0]=4 group[0]->[1 2]
	//len[1]=2 cap[1]=4 group[1]->[3 4]
	//len[2]=2 cap[1]=2 group[1]->[1 500]
}



// üß© **–ó–∞–¥–∞—á–∞ 1 ‚Äî –†–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–π append**

func main() {
	s := []int{1, 2, 3} //len=3 cap=3
	a := s[:2]          //a->[1 2] len=2 cap=3
	b := append(a, 10)  //b->[1 2 10]
	a[0] = 99
	//s->[99 2 3]
	//a->[99 2]
	//b->[99 2 10]

	fmt.Println("s:", s, "a:", a, "b:", b)
}


//üß† –í–æ–ø—Ä–æ—Å—ã:

* –î–µ–ª—è—Ç –ª–∏ `a` –∏ `b` –æ–±—â–∏–π –º–∞—Å—Å–∏–≤?
* –ò–∑–º–µ–Ω–∏—Ç—Å—è –ª–∏ `s` –ø–æ—Å–ª–µ `a[0]=99`?



// üß© **–ó–∞–¥–∞—á–∞ 2 ‚Äî –ü–æ—Ç–µ—Ä—è —Å–≤—è–∑–∏ –ø—Ä–∏ append**

func main() {
	s := make([]int, 0, 2) //l=0 c=2 []
	s = append(s, 5)       //l=1 c=2 s>[5]
	t := append(s, 6)      //l=2 c=2 t->[5 6]
	s = append(s, 7)       // l=2 c=2 s->[5 7]
	//t->[5 7]
	fmt.Println("s:", s, "t:", t)
}

//üß† –í–æ–ø—Ä–æ—Å: –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ `append`, –¥–µ–ª—è—Ç –ª–∏ `s` –∏ `t` –æ–±—â–∏–π backing array?


// üß© **–ó–∞–¥–∞—á–∞ 3 ‚Äî –°—Ä–µ–∑ –∏–∑ —Å—Ä–µ–∑–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤**

func main() {
	s1 := []int{10, 20, 30, 40} //len=4 cap=4 s1->[10 20 30 40]
	s2 := s1[1:3]               //len=2 cap=4 s2->[20 30]
	s3 := s2[1:]                //len=1 cap=4 s3->[30]
	s3[0] = 999                 //len=1 cap=4 s3->[999]
	//s1->[10 20 999 40]
	//s2->[20 999]
	//s3->[999]
	fmt.Println("s1:", s1, "s2:", s2, "s3:", s3)
}


//üß† –û–ø—Ä–µ–¥–µ–ª–∏:

//* –ß—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ?
//* –ü–æ—á–µ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏–µ `s3` –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ `s1`?

//

// üß© **–ó–∞–¥–∞—á–∞ 4 ‚Äî –ü–æ–ª–Ω—ã–π —Å—Ä–µ–∑ –∏ –æ–±—Ä–µ–∑–∞–Ω–∏–µ cap**

func main() {
	data := []int{1, 2, 3, 4} // len=4 cap=4 data->[1 2 3 4]
	left := data[:2:2]        //len = 2 cap=2 left->[1 2]
	right := append(left, 10) //len=3 cap=4 right->[1 2 10]
	//data->[1 2 3 4]
	//left->[1 2]
	//right->[1 2 10]
	fmt.Println("data:", data, "left:", left, "right:", right)
}

//üß† –ü–æ—á–µ–º—É `right` –Ω–µ –∏–∑–º–µ–Ω–∏–ª `data`?


// üß© **–ó–∞–¥–∞—á–∞ 5 ‚Äî Copy vs –æ–±—â–∏–π –º–∞—Å—Å–∏–≤**

func main() {
	a := []int{1, 2, 3}      //len=3 cap=3 a->[1 2 3]
	b := make([]int, len(a)) // len=3 cap=3 b->[]
	copy(b, a)               //len=3 cap=3 b->[1 2 3]
	b[0] = 100
	//a->[1 2 3]
	//[100 2 3]
	fmt.Println("a:", a, "b:", b)
}

//üß† –ü–æ—á–µ–º—É `a` –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è? (–ü–æ–¥—É–º–∞–π, —á—Ç–æ –¥–µ–ª–∞–µ—Ç `copy` —Å backing array.)


// üß© **–ó–∞–¥–∞—á–∞ 6 ‚Äî –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ reslice**

func main() {
	s := []int{1, 2, 3, 4, 5} //len=5 cap=5 s->[1 2 3 4 5]
	i := 2
	s = append(s[:i], s[i+1:]...) //s->[1 2 4 5]
	fmt.Println("s:", s)
	fmt.Println("s cap:", cap(s))
	s = s[:cap(s)] //s->[1 2 4 5 5]
	fmt.Println("s:", s)
}

//üß† –ß—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞—Ç—å `s = s[:cap(s)]`?


// üß© **–ó–∞–¥–∞—á–∞ 7 ‚Äî –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ª–∞–π—Å—ã (slice of slice)**

func main() {
	a := []int{1, 2, 3, 4} //len=4 cap=4 a=[1 100 3 4]
	group := [][]int{a[:2], a[2:]}
	//group ->{
	//[1 100] len2 cap4
	//[3 4] len2 cap4
	//}
	group[0][1] = 100
	fmt.Println("a:", a, "group:", group)
	//a=[1 100 3 4]
	////group ->{
	////[1 100] len2 cap4
	////[3 4] len2 cap4
	////}
}

//üß† –ü–æ—á–µ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏–µ `group[0]` –∏–∑–º–µ–Ω–∏–ª–æ `a`?


// üß© **–ó–∞–¥–∞—á–∞ 8 ‚Äî –†–∞–∑–¥–µ–ª—ë–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∏ append –≤ –ø–æ–¥-—Å–ª–∞–π—Å–µ**

func main() {
	a := []int{10, 20, 30, 40} // len4 cap4 a->[10 20 30 40]
	b := a[:2]                 //len2 cap4 b->[10 20]
	c := append(b, 99)         // c->[10 20 99]
	fmt.Println("a:", a, "b:", b, "c:", c)
	//a->[10 20 99 40]
	//b->[10 20]
	//c->[10 20 99]
}

//üß† –ì–¥–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî –≤ `a` –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤ `c`?


// üß© **–ó–∞–¥–∞—á–∞ 9 ‚Äî –°–ª–∏—è–Ω–∏–µ —Å–ª–∞–π—Å–æ–≤**



func main() {
	a := []int{1, 2}     //a->[1 2]
	b := []int{3, 4}     //b->[3 4]
	c := append(a, b...) //c->[1 2 3 4]
	b[0] = 999           //[99 4]
	fmt.Println("a:", a, "b:", b, "c:", c)
	//a->[1 2]
	//b->[99 4]
	//c->[1 2 3 4]

}


//üß† –ü–æ—á–µ–º—É `c` –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ `b[0]=999`?

*/

// üß© **–ó–∞–¥–∞—á–∞ 10 ‚Äî –ü–æ–ª–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —É—Ç—Ä–∞—Ç–∞ —Å–≤—è–∑–∏**

func main() {
	s1 := make([]int, 0, 2) // l2 c2 s1->[]
	s1 = append(s1, 1, 2)   // s1->[1 2]
	s2 := s1                //s2->[1 2]
	s1 = append(s1, 3)      //s1->[1 2 3] new backing array
	s1[0] = 100             //s1->[100 2 3]
	fmt.Println("s1:", s1, "s2:", s2)
	//s1->[100 2 3]
	//s2->[1 2]
}

//üß† –û–ø—Ä–µ–¥–µ–ª–∏:

//* –ú–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π backing array.
//* –ü–æ—á–µ–º—É `s2` –æ—Å—Ç–∞–ª—Å—è ‚Äú—Å—Ç–∞—Ä—ã–º‚Äù?

// üìò –ö–∞–∫ –ª—É—á—à–µ –∏—Ö –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
